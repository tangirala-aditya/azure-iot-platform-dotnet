trigger:
  batch: true
  branches:
    include:
      - master
pr:
  autoCancel: true
  branches:
    include:
    - master
schedules:
  - cron: 0 6 * * *
    displayName: Daily midnight (CST) build
    branches:
      include:
        - master
    always: true
pool:
  vmImage: ubuntu-latest
variables:
  - template: ../templates/variables-all.yaml
  - name: buildId
    value: build-$(Build.BuildId)
  - name: applicationCode
    value: acshyd
  - name: applicationShortCode
    value: acs
  - name: environmentCategory
    value: dev
  - name: subscriptionName
    value: Devops.azure3-Subscription
  - name: aksName
    value: $(applicationCode)-$(aksPartialName)-$(environmentCategory)
  - name: appConfigurationName
    value: $(applicationCode)-$(appConfigurationPartialName)-$(environmentCategory)
  - name: resourceGroupName
    value: $(resourceGroupPartialName)-iot-$(applicationShortCode)-$(environmentCategory)
  - name: storageAccountName
    value: $(applicationCode)$(storageAccountPartialName)$(environmentCategory)
  - name: tableStorageName
    value: pipeline
  - name: tableStoragePartition
    value: test
  - name: tableStorageRowKeyPrefix
    value: "$(buildId):"
  - name: kubernetesNamespaceWasCreatedRowKey
    value: kubernetesNamespaceWasCreated
  - name: mmmIotPlatformServicesHelmChartWasInstalledRowKey
    value: mmmIotPlatformServicesHelmChartWasInstalled
  - name: mmmIotPlatformIngressHelmChartWasInstalledRowKey
    value: mmmIotPlatformIngressHelmChartWasInstalled
  - name: tableStorageAppConfigurationConnectionStringRowKey
    value: appConfigurationConnectionString
  - name: kubernetesNamespace
    value: $(buildId)
  - name: dockerfile
    value: Dockerfile
  - name: helmVersion
    value: $(helmVersion2)
  - name: mmmIotPlatformServicesHelmChartName
    value: mmm-iot-platform-services
  - name: mmmIotPlatformIngressHelmChartName
    value: mmm-iot-platform-ingress
  - name: publishedFilesArtifactName
    value: publishFiles
  - name: functionsArtifactName
    value: functionsFiles
  - name: webuiArtifactName
    value: webuiFiles
  - name: helmInstallTimeoutInSeconds
    value: 1000    
  - name: mmmIotPlatformServicesHelmChartValuesFile
    value: pipelines/ci/mmm-iot-platform-chart-values.yaml
  - name: mmmIotPlatformServicesHelmChartReleaseName
    value: services-$(buildId)
  - name: mmmIotPlatformIngressHelmChartReleaseName
    value: ingress-$(buildId)
  - name: tagsFile
    value: pipelines/cd/arm/tagging/IoT_CRSL_Environment_Dev.json
  - name: dependenciesReportArtifactName
    value: dependenciesReport
  - name: commitsSinceLastReleaseArtifactName
    value: commitsSinceLastRelease
  - name: testResultFileExists
    value: false
  - name: usersTableName
    value: user
  - name: sysAdminTableName
    value: SystemAdmin    
stages:
  - stage: build
    displayName: Build
    dependsOn: []
    jobs:
      - job: preBuild
        displayName: Pre-build
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Get App Configuration connection string
            name: getAppConfigurationConnectionString
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                $appConfigurationConnectionString = az appconfig credential list --name $(appConfigurationName) --resource-group $(resourceGroupName) --query "[?name=='Primary'].connectionString | [0]" --output tsv
                echo "##vso[task.setvariable variable=AppConfigurationConnectionString;isOutput=true]$appConfigurationConnectionString"
                $tableExists = az storage table exists --name $(tableStorageName) --account-name $(storageAccountName) --output tsv
                if ($tableExists -eq $False)
                {
                  az storage table create --name $(tableStorageName) --account-name $(storageAccountName)
                }
                az storage entity insert --entity PartitionKey=$(tableStoragePartition) RowKey=$(tableStorageRowKeyPrefix)$(tableStorageAppConfigurationConnectionStringRowKey) Content="$appConfigurationConnectionString" --table-name $(tableStorageName) --account-name $(storageAccountName)

      - job: build
        displayName: Build Services
        dependsOn:
          - preBuild
        variables:
          AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '3.1.x'
              includePreviewVersions: true

          - script: >-
              dotnet restore
              --force
              --no-cache
              --no-dependencies
              --packages .nuget
              --runtime $(dotnetProductionRuntimeId)
              /p:TargetLatestRuntimePatch=true
            displayName: Restore dependencies
          - script: >-
              dotnet publish
              --self-contained false
              --no-restore
              --no-dependencies
              --configuration $(dotnetBuildConfiguration)
              --runtime $(dotnetProductionRuntimeId)
              /p:TargetLatestRuntimePatch=true
            displayName: Build assemblies
          - task: CopyFiles@2
            displayName: Prepare services artifacts
            inputs:
              contents: |
                *.sln
                *.props
                *.ruleset
                global.json
                .nuget/**/*
                src/services/**/*
                test/services/**/*
                src/functions/**/*
              targetFolder: $(publishedFilesArtifactName)
              cleanTargetFolder: true

          - publish: $(publishedFilesArtifactName)
            artifact: $(publishedFilesArtifactName)
            displayName: Publish services artifacts

      - job: functionBuild
        displayName: Build Functions
        pool:
          vmImage: 'vs2017-win2016'
        dependsOn:
          - preBuild
        variables:
          AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '3.1.x'
              includePreviewVersions: true

          - script: >-
              dotnet restore
              --force
              --no-cache
              --no-dependencies
              --packages .nuget
              /p:TargetLatestRuntimePatch=true
            displayName: Restore dependencies
          - script: >-
              dotnet publish
              --self-contained false
              --no-restore
              --no-dependencies
              --configuration $(dotnetBuildConfiguration)
              /p:TargetLatestRuntimePatch=true
            displayName: Build assemblies
          - task: CopyFiles@2
            displayName: Prepare Azure Functions artifacts
            inputs:
              contents: |
                src/functions/**/*
              targetFolder: $(functionsArtifactName)
              cleanTargetFolder: true

          - publish: $(functionsArtifactName)
            artifact: $(functionsArtifactName)
            displayName: Publish Azure Functions artifacts

  - stage: buildFrontEndContainers
    displayName: Build front-end containers
    dependsOn: []
    jobs:
      - job: lintWebuiCode
        displayName: Lint webui code
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: NodeTool@0
            inputs:
              versionSpec: 14.16.0

          - pwsh: |-
              npm install
              npm run lint
            displayName: npm run lint
            workingDirectory: src/webui
          - task: CopyFiles@2
            displayName: Prepare services artifacts
            inputs:
              contents: |
                src/webui/**/*
              targetFolder: $(webuiArtifactName)
              cleanTargetFolder: true

          - publish: $(webuiArtifactName)
            artifact: $(webuiArtifactName)
            displayName: Publish services artifacts

      - job: buildFrontEndContainers
        displayName: Build front-end containers
        dependsOn: []
        strategy:
          matrix:
            reverse-proxy:
              serviceName: reverse-proxy
            webui:
              serviceName: webui
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: Docker@2
            displayName: Build and push container
            inputs:
              containerRegistry: $(dockerHubServiceConnectionName)
              repository: $(dockerHubRepositoryName)/$(serviceName)
              command: buildAndPush
              dockerfile: src/$(serviceName)/$(dockerfile)
              buildContext: src/$(serviceName)
              tags: |-
                $(Build.BuildId)
                $(Build.SourceVersion)
  - stage: buildServiceContainers
    displayName: Build service containers
    dependsOn:
      - build
    jobs:
      - job: buildServiceContainers
        displayName: Build service containers
        strategy:
          matrix:
            asa-manager:
              serviceName: asa-manager
            config:
              serviceName: config
            device-telemetry:
              serviceName: device-telemetry
            diagnostics:
              serviceName: diagnostics
            identity-gateway:
              serviceName: identity-gateway
            iothub-manager:
              serviceName: iothub-manager
            storage-adapter:
              serviceName: storage-adapter
            tenant-manager:
              serviceName: tenant-manager
        steps:
          - checkout: none

          - download: current
            artifact: $(publishedFilesArtifactName)
            displayName: Download artifacts

          - pwsh: |-
              $assemblyName = (Get-Content src/services/$(serviceName)/WebService/WebService.csproj | Select-String '(?<=<AssemblyName>).*(?=</AssemblyName>)').Matches[0].Value
              $dockerfileContents = "FROM mcr.microsoft.com/dotnet/core/aspnet:$(dotnetCoreRuntimeVersion)-alpine AS base`nWORKDIR /app`nEXPOSE 80`nCOPY . .`nENTRYPOINT [`"dotnet`", `"$assemblyName.dll`"]"
              Set-Content -Value $dockerfileContents -Path $(dockerfile) -NoNewline -Encoding utf8
            displayName: Generate Dockerfile
            workingDirectory: $(Pipeline.Workspace)/$(publishedFilesArtifactName)
          - task: Docker@2
            displayName: Build and push container
            inputs:
              containerRegistry: $(dockerHubServiceConnectionName)
              repository: $(dockerHubRepositoryName)/$(serviceName)
              command: buildAndPush
              dockerfile: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/$(dockerfile)
              buildContext: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/src/services/$(serviceName)/WebService/bin/$(dotnetBuildConfiguration)/netcoreapp$(dotnetCoreRuntimeVersion)/$(dotnetProductionRuntimeId)/publish
              tags: |-
                $(Build.BuildId)
                $(Build.SourceVersion)
                
  - stage: addAuthenticationCallbackUrl
    displayName: Add auth callback URL
    dependsOn: []
    jobs:
      - job: addAuthenticationCallbackUrl
        displayName: Add auth callback URL
        pool:
          vmImage: windows-latest
        steps:
          - checkout: none

          - task: PowerShell@2
            displayName: Add auth callback URL
            inputs:
              targetType: inline
              script: |-
                Install-Module AzureAD -Force
                $password = ConvertTo-SecureString -String '$(azureAdB2cTenantPassword)' -AsPlainText -Force
                $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList '$(azureAdB2cTenantUsername)', $password
                $azContext = Connect-AzureAD -TenantId $(azureAdB2cAppRegistrationTenantId) -Credential $credential
                if ($azContext.TenantId -ne '$(azureAdB2cAppRegistrationTenantId)') {
                  throw 'You are not connected to the right tenant'
                }
                $app = Get-AzureADMSApplication -Filter "DisplayName eq '$(azureAdB2cAppRegistrationNameTest)'"
                $replyUrls = $app.web.RedirectUris
                if (!$replyUrls.Contains('$(authenticationCallbackUrl)'))
                {
                  $replyUrls.Add('$(authenticationCallbackUrl)')
                  Set-AzureADMSApplication -ObjectId $app.Id -Web @{ RedirectUris = $replyUrls }
                }
  - stage: deployIngress
    displayName: Deploy ingress
    dependsOn: []
    jobs:
      - job: deployIngress
        displayName: Deploy ingress
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: KubectlInstaller@0
            displayName: Install kubectl
            inputs:
              kubectlVersion: 1.18.2

          - task: AzureCLI@2
            displayName: Create namespace
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                az aks get-credentials --name $(aksName) --resource-group $(resourceGroupName) --overwrite-existing
                $namespaceAlreadyExists = $Null -ne (kubectl get namespaces $(kubernetesNamespace) --output json --ignore-not-found)
                if (!$namespaceAlreadyExists) {
                  kubectl create namespace $(kubernetesNamespace) --output json
                }
                az storage entity insert --entity PartitionKey=$(tableStoragePartition) RowKey=$(tableStorageRowKeyPrefix)$(kubernetesNamespaceWasCreatedRowKey) Content="true" --table-name $(tableStorageName) --account-name $(storageAccountName)
          - template: ../templates/steps-install-helm.yaml
            parameters:
              helmVersion: $(helmVersion)
              subscriptionName: $(subscriptionName)
              resourceGroupName: $(resourceGroupName)
              aksName: $(aksName)
              kubernetesNamespace: $(kubernetesNamespace)

          - task: HelmDeploy@0
            displayName: Install ingress Helm chart
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(subscriptionName)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksName)
              useClusterAdmin: false
              namespace: $(kubernetesNamespace)
              command: install
              chartName: charts/$(mmmIotPlatformIngressHelmChartName)
              releaseName: $(mmmIotPlatformIngressHelmChartReleaseName)
              updatedependency: true
              arguments: >-
                --set nginx-ingress.controller.ingressClass=$(buildId)
                --set domain=$(testPipelineDomain)
                --set subdomain=$(buildId)
                --set letsEncryptEnvironment=staging
                --timeout $(helmInstallTimeoutInSeconds)
                --wait
          - task: AzureCLI@2
            displayName: Note ingress Helm chart was installed
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                set -Eeuxo pipefail
                az storage entity insert --entity PartitionKey=$(tableStoragePartition) RowKey=$(tableStorageRowKeyPrefix)$(mmmIotPlatformIngressHelmChartWasInstalledRowKey) Content="true" --table-name $(tableStorageName) --account-name $(storageAccountName)
          - task: AzureCLI@2
            displayName: Configure DNS
            name: configureDns
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                az aks get-credentials --name $(aksName) --resource-group $(resourceGroupName) --overwrite-existing
                $ingressControllerIpAddress = kubectl get services --namespace $(kubernetesNamespace) --selector=app=nginx-ingress,component=controller --output=jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}'
                $tagsHashtable = Get-Content $(tagsFile) | ConvertFrom-Json -Depth 100 -AsHashtable
                $tags = ($tagsHashtable.Keys | ForEach-Object { "$_=`"$($tagsHashtable[$_])`"" }) -join ','
                az network dns zone create --name $(testPipelineDomain) --resource-group "rg-iot-crsl-dev" --if-none-match --tags $tags
                az network dns record-set a add-record --record-set-name $(buildId) --resource-group "rg-iot-crsl-dev" --zone-name $(testPipelineDomain) --ipv4-address $ingressControllerIpAddress --if-none-match
                $certificateIsReady = kubectl get certificates --namespace $(kubernetesNamespace) --output jsonpath="{.items[0].status.conditions[?(@.type=='Ready')].status}"
                while ([System.String]::IsNullOrEmpty($certificateIsready) -or 'true' -ne  $certificateIsReady.ToLower()) {
                  Write-Host Waiting for certificate to be ready...
                  Start-Sleep -Seconds 10
                  $certificateIsReady = kubectl get certificates --namespace $(kubernetesNamespace) --output jsonpath="{.items[0].status.conditions[?(@.type=='Ready')].status}"
                }
  - stage: deployServices
    displayName: Deploy services
    dependsOn:
      - buildFrontEndContainers
      - buildServiceContainers
    jobs:
      - job: getPipelineVariables
        displayName: Get pipeline variables
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Get pipeline variables
            name: getPipelineVariables
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                set -Eeuxo pipefail
                appConfigurationConnectionString=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(tableStorageAppConfigurationConnectionStringRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=appConfigurationConnectionString;isOutput=true]$appConfigurationConnectionString"
      - job: deployServices
        displayName: Deploy services
        dependsOn:
          - getPipelineVariables
        variables:
          appConfigurationConnectionString: $[dependencies.getPipelineVariables.outputs['getPipelineVariables.appConfigurationConnectionString']]
        steps:
          - checkout: self
            displayName: Checkout repository

          - template: ../templates/steps-install-helm.yaml
            parameters:
              helmVersion: $(helmVersion)
              subscriptionName: $(subscriptionName)
              resourceGroupName: $(resourceGroupName)
              aksName: $(aksName)
              kubernetesNamespace: $(kubernetesNamespace)

          - script: |-
              set -Eeuxo pipefail
              sed -i -e 's/replace_this_imageTag/$(Build.BuildId)/g' $(mmmIotPlatformServicesHelmChartValuesFile)
            displayName: Set image tag

          - task: AzureCLI@2
            displayName: Install Grafana Deployment and Service
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                set -Eeuxo pipefail
                az aks get-credentials -n $(aksName) -g $(resourceGroupName)
                kubectl create deployment grafana --image=$(grafanaImage) -n $(kubernetesNamespace)
                kubectl expose deployment grafana -n $(kubernetesNamespace) --port=80 --target-port=3000 --protocol=TCP

          - task: HelmDeploy@0
            displayName: Install services Helm chart
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(subscriptionName)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksName)
              useClusterAdmin: true
              namespace: $(kubernetesNamespace)
              command: 'install'
              chartName: charts/$(mmmIotPlatformServicesHelmChartName)
              releaseName: $(mmmIotPlatformServicesHelmChartReleaseName)
              updatedependency: true
              valueFile: $(mmmIotPlatformServicesHelmChartValuesFile)
              arguments: >-
                --set secrets.globalsecrets.Global__ClientAuth__Jwt__AuthIssuer=https://$(testPipelineFqdn)/auth
                --set secrets.globalsecrets.AppConfigurationConnectionString=$(appConfigurationConnectionString)
                --set secrets.globalsecrets.Global__AzureB2cBaseUri=https://login.microsoftonline.com/crsltestab2c.onmicrosoft.com/oauth2/v2.0/authorize?p=B2C_1_testpolicy&client_id=$(azureAdB2cAppRegistrationClientIdTest)&nonce=defaultNonce&redirect_uri=https%3A%2F%2Flocalhost%3A44367%2Fconnect%2Fcallback&scope=openid&response_type=id_token&prompt=login&response_mode=form_post
                --timeout $(helmInstallTimeoutInSeconds)
                --wait

          - task: AzureCLI@2
            displayName: Note services Helm chart was installed
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                set -Eeuxo pipefail
                az storage entity insert --entity PartitionKey=$(tableStoragePartition) RowKey=$(tableStorageRowKeyPrefix)$(mmmIotPlatformServicesHelmChartWasInstalledRowKey) Content="true" --table-name $(tableStorageName) --account-name $(storageAccountName)
  - stage: functionalTest
    displayName: Functional tests
    dependsOn:
      - deployIngress
      - deployServices
      - addAuthenticationCallbackUrl
    jobs:
      - job: addFunctionalTestAccount
        displayName: Add Functional Test Account
        dependsOn: []
        steps:
        - checkout: none
        - task: AzureCLI@2
          displayName: Add TestAccount details  to App Configuration
          inputs:
              azureSubscription: $(subscriptionName)
              addSpnToEnvironment: true
              scriptLocation: inlineScript
              scriptType: bash
              inlineScript: |-
                set -Eeuxo pipefail
                az appconfig kv set --key TestUserCredentials:Admin:Password --value $(testAdminPasskey) --name $(appConfigurationName)  --yes
                az appconfig kv set --key TestUserCredentials:Admin:UserEmail --value $(testAdminEmail) --name $(appConfigurationName)  --yes
                az appconfig kv set --key TestUserCredentials:Readonly:Password --value $(testUserPasskey) --name $(appConfigurationName)  --yes
                az appconfig kv set --key TestUserCredentials:Readonly:UserEmail --value $(testUserEmail) --name $(appConfigurationName)  --yes
                az appconfig kv set --key TestUserCredentials:SystemAdmin:Password --value $(testSystemAdminPasskey) --name $(appConfigurationName)  --yes
                az appconfig kv set --key TestUserCredentials:SystemAdmin:UserEmail --value $(testSystemAdminEmail) --name $(appConfigurationName)  --yes          
          
        - task: AzurePowerShell@5
          displayName: Verify and add Test Account in the User Table
          inputs:
            azureSubscription: $(subscriptionName)
            azurePowerShellVersion: LatestVersion
            ScriptType: InlineScript
            Inline: |
              Install-Module AzTable -force
              $table = Get-AzTableTable -resourceGroup $(resourceGroupName) -tableName $(usersTableName) -storageAccountName $(storageAccountName)
              $saTable = Get-AzTableTable -resourceGroup $(resourceGroupName) -tableName $(sysAdminTableName) -storageAccountName $(storageAccountName)
              $datetimevariable = Get-Date -Format "yyyy-MM-ddTHH:mm:ss:fffffffZ"
              $testUser = Get-AzTableRowByPartitionKeyRowKey -Table $table -PartitionKey $(testAccountUser) -RowKey $(serenityDevTenantId)
              $testAdmin =Get-AzTableRowByPartitionKeyRowKey -Table $table -PartitionKey $(testAccountAdmin) -RowKey $(serenityDevTenantId)
              $testSystemAdmin = Get-AzTableRowByPartitionKeyRowKey -Table $table -PartitionKey $(testAccountSysAdmin) -RowKey $(serenityDevTenantId)
              $saTestSystemAdmin = Get-AzTableRowByPartitionKey -Table $saTable -PartitionKey $(testAccountSysAdmin)
            
              if(($testUser -eq $Null) -or ($testUser.Roles -ne '["readonly"]')){
                  Add-AzTableRow `
                  -table $table `
                  -partitionKey $(testAccountUser) `
                  -rowKey $(serenityDevTenantId) -property @{"Timestamp"=$datetimevariable;"Roles"='["readonly"]';"Name"="TestAccount - User";"Type"="Member"}
              }
              if(($testAdmin -eq $Null) -or ($testAdmin.Roles -ne '["admin"]')){
                  Add-AzTableRow `
                  -table $table `
                  -partitionKey $(testAccountAdmin) `
                  -rowKey $(serenityDevTenantId) -property @{"Timestamp"=$datetimevariable;"Roles"='["admin"]';"Name"="TestAccount - Admin";"Type"="Member"}
              }
              if(($testSystemAdmin -eq $Null) -or ($testSystemAdmin.Roles -ne '["admin"]')){
                  Add-AzTableRow `
                  -table $table `
                  -partitionKey $(testAccountSysAdmin) `
                  -rowKey $(serenityDevTenantId) -property @{"Timestamp"=$datetimevariable;"Roles"='["admin"]';"Name"="TestAccount - SystemAdmin";"Type"="Member"}
              }
              if($saTestSystemAdmin -eq $Null){
                  Add-AzTableRow `
                  -table $saTable `
                  -partitionKey $(testAccountSysAdmin) `
                  -rowKey $(testAccountSysAdmin) -property @{"Timestamp"=$datetimevariable;"Name"="TestAccount - SystemAdmin";"Type"="Member"}
              }
      - job: getPipelineVariables
        displayName: Get pipeline variables
        dependsOn: 
          - addFunctionalTestAccount
        steps:
          - checkout: none
          - task: AzureCLI@2
            displayName: Get pipeline variables
            name: getPipelineVariables
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                appConfigurationConnectionString=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(tableStorageAppConfigurationConnectionStringRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=appConfigurationConnectionString;isOutput=true]$appConfigurationConnectionString"
      - job: functionalTest
        displayName: Functional test
        dependsOn:
          - getPipelineVariables
        variables:
          SerenityBaseUrl: https://$(testPipelineFqdn)
          AppConfigurationConnectionString: $[dependencies.getPipelineVariables.outputs['getPipelineVariables.appConfigurationConnectionString']]
          SerenityTenantId: $(serenityDevTenantId)
        steps:
          - checkout: azure-iot-functional-tests
            displayName: Checkout repository

          - task: AzureCLI@2
            displayName: Wait for webui pod to be ready
            name: getPipelineVariables
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                set -Eeuxo pipefail
                az aks get-credentials --name $(aksName) --resource-group $(resourceGroupName) --overwrite-existing
                kubectl get pods -n $(kubernetesNamespace)
                kubectl wait pods --for=condition=Ready --selector app.kubernetes.io/name=webui -n $(kubernetesNamespace)
                kubectl wait pods --for=condition=Ready --timeout=500s --selector app.kubernetes.io/name=reverse-proxy -n $(kubernetesNamespace)
          - task: DotNetCoreCLI@2
            displayName: Run functional tests
            continueOnError: true
            inputs:
              command: test
              arguments: >-
                --configuration $(dotnetBuildConfiguration)
                --logger trx
                --filter 'Category!=Flaky'
          - bash: |
              if [ -d $(System.DefaultWorkingDirectory)/src/bin/$(dotnetBuildConfiguration)/netcoreapp$(dotnetCoreRuntimeVersion)/screenshots ]; then
                echo "##vso[task.setvariable variable=testResultFileExists]true"
              fi
          - publish: $(System.DefaultWorkingDirectory)/src/bin/$(dotnetBuildConfiguration)/netcoreapp$(dotnetCoreRuntimeVersion)/screenshots
            artifact: UITestScreenshots
            displayName: Publish UI Test screenshots artifacts
            condition: eq(variables.testResultFileExists, 'true')
            continueOnError: true

  - stage: enumerateDependencies
    displayName: Enumerate dependencies
    dependsOn:
      - deployIngress
      - deployServices
    jobs:
      - job: enumerateDependencies
        displayName: Enumerate dependencies
        steps:
          - checkout: self
            displayName: Checkout repository

          - pwsh: |-
              if (!(Test-Path $(dependenciesReportArtifactName))) {
                New-Item $(dependenciesReportArtifactName) -Type Directory
              }
            displayName: Create artifact directory
          - task: AzureCLI@2
            displayName: Enumerate NuGet packages
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                Get-ChildItem -Recurse |
                  Select-String -Pattern '(?<=PackageReference Include=")[^"]+' |
                  Select-Object -ExpandProperty Matches |
                  Select-Object -ExpandProperty Value -Unique |
                  Sort-Object |
                  Set-Content (Join-Path $(dependenciesReportArtifactName) nuget.txt)
          - task: AzureCLI@2
            displayName: Enumerate NPM packages
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                Get-Content src/webui/package.json |
                  ConvertFrom-Json -Depth 100 |
                  Select-Object -ExpandProperty dependencies |
                  Get-Member -MemberType NoteProperty |
                  Select-Object -ExpandProperty Name -Unique |
                  Sort-Object |
                  Set-Content (Join-Path $(dependenciesReportArtifactName) npm.txt)
          - template: ../templates/steps-install-helm.yaml
            parameters:
              helmVersion: $(helmVersion)
              subscriptionName: $(subscriptionName)
              resourceGroupName: $(resourceGroupName)
              aksName: $(aksName)
              kubernetesNamespace: $(kubernetesNamespace)

          - task: AzureCLI@2
            displayName: Enumerate Helm chart dependencies
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                az aks get-credentials --name $(aksName) --resource-group $(resourceGroupName) --overwrite-existing
                helm list --output json --all --namespace $(kubernetesNamespace) |
                  ConvertFrom-Json -Depth 100 |
                  Select-Object -ExpandProperty Releases |
                  Select-Object -ExpandProperty Chart -Unique |
                  Where-Object { $_ -notmatch 'mmm-iot' } |
                  Sort-Object |
                  Set-Content (Join-Path $(dependenciesReportArtifactName) helm.txt)
          - publish: $(dependenciesReportArtifactName)
            artifact: $(dependenciesReportArtifactName)
            displayName: Publish dependencies report

  - stage: cleanup
    displayName: Cleanup
    dependsOn:
      - functionalTest
      - enumerateDependencies
      - deployServices
    condition: and(always(), eq(variables['runCleanupStage'], 'true'))
    jobs:
      - job: getPipelineVariables
        displayName: Get pipeline variables
        dependsOn: []
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Get pipeline variables
            name: getPipelineVariables
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                kubernetesNamespaceWasCreated=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(kubernetesNamespaceWasCreatedRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=kubernetesNamespaceWasCreated;isOutput=true]$kubernetesNamespaceWasCreated"
                mmmIotPlatformServicesHelmChartWasInstalled=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(mmmIotPlatformServicesHelmChartWasInstalledRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=mmmIotPlatformServicesHelmChartWasInstalled;isOutput=true]$mmmIotPlatformServicesHelmChartWasInstalled"
                mmmIotPlatformIngressHelmChartWasInstalled=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(mmmIotPlatformIngressHelmChartWasInstalledRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=mmmIotPlatformIngressHelmChartWasInstalled;isOutput=true]$mmmIotPlatformIngressHelmChartWasInstalled"
      - job: deleteDnsRecordSet
        displayName: Delete DNS record set
        dependsOn: []
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Delete DNS record set
            name: deleteDnsRecordSet
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                $recordSetCount = az network dns record-set a list --zone-name $(testPipelineDomain) --resource-group "rg-iot-crsl-dev" --query '[?name==`$(buildId)`] | length(@)'
                if ($recordSetCount -gt 0) {
                  az network dns record-set a delete --name $(buildId) --zone-name $(testPipelineDomain) --resource-group "rg-iot-crsl-dev" --yes
                }
      - job: uninstallServicesChart
        displayName: Uninstall services Helm chart
        dependsOn:
          - getPipelineVariables
        condition: and(eq(dependencies.getPipelineVariables.outputs['getPipelineVariables.mmmIotPlatformServicesHelmChartWasInstalled'], 'true'), not(failed()))
        steps:
          - checkout: none

          - template: ../templates/steps-install-helm.yaml
            parameters:
              helmVersion: $(helmVersion)
              subscriptionName: $(subscriptionName)
              resourceGroupName: $(resourceGroupName)
              aksName: $(aksName)
              kubernetesNamespace: $(kubernetesNamespace)

          - task: HelmDeploy@0
            displayName: Uninstall services Helm chart
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(subscriptionName)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksName)
              useClusterAdmin: false
              command: delete
              arguments: --purge $(mmmIotPlatformServicesHelmChartReleaseName)

          - task: AzureCLI@2
            displayName: Delete Grafana Deployment and Service
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                set -Eeuxo pipefail
                az aks get-credentials -n $(aksName) -g $(resourceGroupName)
                kubectl delete deployment grafana -n $(kubernetesNamespace)
                kubectl delete service grafana -n $(kubernetesNamespace)

      - job: uninstallIngressChart
        displayName: Uninstall ingress Helm chart
        dependsOn:
          - getPipelineVariables
        condition: and(eq(dependencies.getPipelineVariables.outputs['getPipelineVariables.mmmIotPlatformIngressHelmChartWasInstalled'], 'true'), not(failed()))
        steps:
          - checkout: none

          - template: ../templates/steps-install-helm.yaml
            parameters:
              helmVersion: $(helmVersion)
              subscriptionName: $(subscriptionName)
              resourceGroupName: $(resourceGroupName)
              aksName: $(aksName)
              kubernetesNamespace: $(kubernetesNamespace)

          - task: HelmDeploy@0
            displayName: Uninstall ingress Helm chart
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(subscriptionName)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksName)
              useClusterAdmin: false
              command: delete
              arguments: --purge $(mmmIotPlatformIngressHelmChartReleaseName)

      - job: deleteNamespace
        displayName: Delete namespace
        dependsOn:
          - getPipelineVariables
          - uninstallIngressChart
          - uninstallIngressChart
        condition: and(eq(dependencies.getPipelineVariables.outputs['getPipelineVariables.kubernetesNamespaceWasCreated'], 'true'), always())
        steps:
          - checkout: none

          - task: Kubernetes@1
            displayName: Delete namespace
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(subscriptionName)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksName)
              command: delete
              arguments: namespace $(kubernetesNamespace) --now=true --ignore-not-found=true

      - job: removeAuthenticationCallbackUrl
        displayName: Remove auth callback URL
        pool:
          vmImage: windows-latest
        steps:
          - checkout: none

          - task: PowerShell@2
            displayName: Remove auth callback URL
            inputs:
              targetType: inline
              script: |-
                Install-Module AzureAD -Force
                $password = ConvertTo-SecureString -String '$(azureAdB2cTenantPassword)' -AsPlainText -Force
                $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList '$(azureAdB2cTenantUsername)', $password
                $azContext = Connect-AzureAD -TenantId $(azureAdB2cAppRegistrationTenantId) -Credential $credential
                if ($azContext.TenantId -ne '$(azureAdB2cAppRegistrationTenantId)') {
                  throw 'You are not connected to the right tenant'
                }
                $app = Get-AzureADMSApplication -Filter "DisplayName eq '$(azureAdB2cAppRegistrationNameTest)'"
                $replyUrls = $app.web.RedirectUris
                Write-Host $replyUrls
                if ($replyUrls.Contains('$(authenticationCallbackUrl)'))
                {
                  $replyUrls.Remove('$(authenticationCallbackUrl)')
                  Set-AzureADMSApplication -ObjectId $app.Id -Web @{ RedirectUris = $replyUrls }
                }
                