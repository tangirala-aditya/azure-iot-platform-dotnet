trigger:
  batch: true
  branches:
    include:
      - master
pr:
  autoCancel: true
  branches:
    include:
    - master
schedules:
  - cron: 0 6 * * *
    displayName: Daily midnight (CST) build
    branches:
      include:
        - master
    always: true
pool:
  vmImage: ubuntu-latest
variables:
  - template: ../templates/variables-all.yaml
  - name: buildId
    value: build-$(Build.BuildId)
  - name: applicationCode
    value: acshyd
  - name: applicationShortCode
    value: acs
  - name: environmentCategory
    value: dev
  - name: subscriptionName
    value: 3M-CRSLAD16-BBIoTP-Dev
  - name: aksName
    value: $(applicationCode)-$(aksPartialName)-$(environmentCategory)
  - name: appConfigurationName
    value: $(applicationCode)-$(appConfigurationPartialName)-$(environmentCategory)
  - name: resourceGroupName
    value: $(resourceGroupPartialName)-iot-$(applicationShortCode)-$(environmentCategory)
  - name: storageAccountName
    value: $(applicationCode)$(storageAccountPartialName)$(environmentCategory)
  - name: tableStorageName
    value: pipeline
  - name: tableStoragePartition
    value: test
  - name: tableStorageRowKeyPrefix
    value: "$(buildId):"
  - name: kubernetesNamespaceWasCreatedRowKey
    value: kubernetesNamespaceWasCreated
  - name: mmmIotPlatformServicesHelmChartWasInstalledRowKey
    value: mmmIotPlatformServicesHelmChartWasInstalled
  - name: mmmIotPlatformIngressHelmChartWasInstalledRowKey
    value: mmmIotPlatformIngressHelmChartWasInstalled
  - name: tableStorageAppConfigurationConnectionStringRowKey
    value: appConfigurationConnectionString
  - name: kubernetesNamespace
    value: $(buildId)
  - name: dockerfile
    value: Dockerfile
  - name: helmVersion
    value: $(helmVersion2)
  - name: mmmIotPlatformServicesHelmChartName
    value: mmm-iot-platform-services
  - name: mmmIotPlatformIngressHelmChartName
    value: mmm-iot-platform-ingress
  - name: publishedFilesArtifactName
    value: publishFiles
  - name: functionsArtifactName
    value: functionsFiles
  - name: webuiArtifactName
    value: webuiFiles
  - name: helmInstallTimeoutInSeconds
    value: 1000
  - name: grafanaImage
    value: docker.io/azureiot3m/grafana-custom:latest    
  - name: mmmIotPlatformServicesHelmChartValuesFile
    value: pipelines/ci/mmm-iot-platform-chart-values.yaml
  - name: mmmIotPlatformServicesHelmChartReleaseName
    value: services-$(buildId)
  - name: mmmIotPlatformIngressHelmChartReleaseName
    value: ingress-$(buildId)
  - name: serenityDevTenantId
    value: 23365407-2e58-47d5-b998-eebbff753332
  - name: testPipelineDomain
    value: iot.cld.3m.com
  - name: testPipelineFqdn
    value: $(buildId).$(testPipelineDomain)
  - name: tagsFile
    value: pipelines/cd/arm/tagging/IoT_CRSL_Environment_Dev.json
  - name: authenticationCallbackUrl
    value: https://$(testPipelineFqdn)/auth/connect/callback
  - name: azureAdB2cAppRegistrationTenantId
    value: aaf9651a-6274-4039-8020-6578ad0d9261
  - name: azureAdB2cAppRegistrationNameProd
    value: iotplatform
  - name: azureAdB2cAppRegistrationClientIdProd
    value: 086c6072-f6fe-449f-887c-e08c598aec0b
  - name: azureAdB2cAppRegistrationNameTest
    value: iotplatform-build-test
  - name: azureAdB2cAppRegistrationClientIdTest
    value: 0c1d6d57-adc2-4d44-abd6-d1927516288d
  - name: azureAdB2cTenantUsername
    value: pipeline-nonprod@crsltestab2c.onmicrosoft.com
  - name: dependenciesReportArtifactName
    value: dependenciesReport
  - name: commitsSinceLastReleaseArtifactName
    value: commitsSinceLastRelease
  - name: testResultFileExists
    value: false
  - name: testAccountAdmin
    value: a05e1a04-31bf-4219-9c1b-b7fa7bfedbfc
  - name: testAccountUser
    value: 9745b86e-c1b1-481a-8628-7db8dfaeedf6
  - name: testAccountSysAdmin
    value: b013febd-466d-4694-8f0d-c151ad32023b
  - name: usersTableName
    value: user
  - name: sysAdminTableName
    value: SystemAdmin    
  
stages:
  - stage: build
    displayName: Build
    dependsOn: []
    jobs:
      - job: preBuild
        displayName: Pre-build
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Get App Configuration connection string
            name: getAppConfigurationConnectionString
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                $appConfigurationConnectionString = az appconfig credential list --name $(appConfigurationName) --resource-group $(resourceGroupName) --query "[?name=='Primary'].connectionString | [0]" --output tsv
                echo "##vso[task.setvariable variable=AppConfigurationConnectionString;isOutput=true]$appConfigurationConnectionString"
                $tableExists = az storage table exists --name $(tableStorageName) --account-name $(storageAccountName) --output tsv
                if ($tableExists -eq $False)
                {
                  az storage table create --name $(tableStorageName) --account-name $(storageAccountName)
                }
                az storage entity insert --entity PartitionKey=$(tableStoragePartition) RowKey=$(tableStorageRowKeyPrefix)$(tableStorageAppConfigurationConnectionStringRowKey) Content="$appConfigurationConnectionString" --table-name $(tableStorageName) --account-name $(storageAccountName)

      - job: build
        displayName: Build Services
        dependsOn:
          - preBuild
        variables:
          AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '3.1.x'
              includePreviewVersions: true

          - script: >-
              dotnet restore
              --force
              --no-cache
              --no-dependencies
              --packages .nuget
              --runtime $(dotnetProductionRuntimeId)
              /p:TargetLatestRuntimePatch=true
            displayName: Restore dependencies
          - script: >-
              dotnet publish
              --self-contained false
              --no-restore
              --no-dependencies
              --configuration $(dotnetBuildConfiguration)
              --runtime $(dotnetProductionRuntimeId)
              /p:TargetLatestRuntimePatch=true
            displayName: Build assemblies
          - task: CopyFiles@2
            displayName: Prepare services artifacts
            inputs:
              contents: |
                *.sln
                *.props
                *.ruleset
                global.json
                .nuget/**/*
                src/services/**/*
                test/services/**/*
                src/functions/**/*
              targetFolder: $(publishedFilesArtifactName)
              cleanTargetFolder: true

          - publish: $(publishedFilesArtifactName)
            artifact: $(publishedFilesArtifactName)
            displayName: Publish services artifacts

      - job: functionBuild
        displayName: Build Functions
        pool:
          vmImage: 'vs2017-win2016'
        dependsOn:
          - preBuild
        variables:
          AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: UseDotNet@2
            inputs:
              packageType: 'sdk'
              version: '3.1.x'
              includePreviewVersions: true

          - script: >-
              dotnet restore
              --force
              --no-cache
              --no-dependencies
              --packages .nuget
              /p:TargetLatestRuntimePatch=true
            displayName: Restore dependencies
          - script: >-
              dotnet publish
              --self-contained false
              --no-restore
              --no-dependencies
              --configuration $(dotnetBuildConfiguration)
              /p:TargetLatestRuntimePatch=true
            displayName: Build assemblies
          - task: CopyFiles@2
            displayName: Prepare Azure Functions artifacts
            inputs:
              contents: |
                src/functions/**/*
              targetFolder: $(functionsArtifactName)
              cleanTargetFolder: true

          - publish: $(functionsArtifactName)
            artifact: $(functionsArtifactName)
            displayName: Publish Azure Functions artifacts

  - stage: listCommitsSinceLastRelease
    displayName: List commits since last release
    dependsOn: []
    jobs:
      - job: listCommitsSinceLastRelease
        displayName: List commits since last release
        steps:
          - checkout: self
            displayName: Checkout repository

          - template: ../templates/print-build-variables.yaml

          - template: ../templates/print-agent-variables.yaml

          - template: ../templates/print-system-variables.yaml

          - template: ../templates/print-common-variables.yaml

          - pwsh: |-
              if (!(Test-Path $(commitsSinceLastReleaseArtifactName))) {
                New-Item $(commitsSinceLastReleaseArtifactName) -Type Directory
              }
              $previousReleaseTag = git for-each-ref --sort=-creatordate --format '%(tag)' refs/tags | ? {$_.trim() -ne "" } |
                Select-Object -First 1
              $logFilePath = (Join-Path $(commitsSinceLastReleaseArtifactName) git-log.txt)
              "Commits since ${previousReleaseTag}:" | Set-Content $logFilePath
              Write-Output "previousReleaseTag: $previousReleaseTag"
              Write-Output 'Build.SourceVersion: $(Build.SourceVersion)'
              git log --oneline --no-decorate --topo-order ^$previousReleaseTag $(Build.SourceVersion) |
                Tee-Object $logFilePath -Append
            displayName: List commits since last release
          - publish: $(commitsSinceLastReleaseArtifactName)
            artifact: $(commitsSinceLastReleaseArtifactName)
            displayName: Publish list of commits since last release

  - stage: buildFrontEndContainers
    displayName: Build front-end containers
    dependsOn: []
    jobs:
      - job: lintWebuiCode
        displayName: Lint webui code
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: NodeTool@0
            inputs:
              versionSpec: 14.16.0

          - pwsh: |-
              npm install
              npm run lint
            displayName: npm run lint
            workingDirectory: src/webui
          - task: CopyFiles@2
            displayName: Prepare services artifacts
            inputs:
              contents: |
                src/webui/**/*
              targetFolder: $(webuiArtifactName)
              cleanTargetFolder: true

          - publish: $(webuiArtifactName)
            artifact: $(webuiArtifactName)
            displayName: Publish services artifacts

      - job: buildFrontEndContainers
        displayName: Build front-end containers
        dependsOn: []
        strategy:
          matrix:
            reverse-proxy:
              serviceName: reverse-proxy
            webui:
              serviceName: webui
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: Docker@2
            displayName: Build and push container
            inputs:
              containerRegistry: $(dockerHubServiceConnectionName)
              repository: $(dockerHubRepositoryName)/$(serviceName)
              command: buildAndPush
              dockerfile: src/$(serviceName)/$(dockerfile)
              buildContext: src/$(serviceName)
              tags: |-
                $(Build.BuildId)
                $(Build.SourceVersion)

  - stage: buildServiceContainers
    displayName: Build service containers
    dependsOn:
      - build
    jobs:
      - job: buildServiceContainers
        displayName: Build service containers
        strategy:
          matrix:
            asa-manager:
              serviceName: asa-manager
            config:
              serviceName: config
            device-telemetry:
              serviceName: device-telemetry
            diagnostics:
              serviceName: diagnostics
            identity-gateway:
              serviceName: identity-gateway
            iothub-manager:
              serviceName: iothub-manager
            storage-adapter:
              serviceName: storage-adapter
            tenant-manager:
              serviceName: tenant-manager
        steps:
          - checkout: none

          - download: current
            artifact: $(publishedFilesArtifactName)
            displayName: Download artifacts

          - pwsh: |-
              $assemblyName = (Get-Content src/services/$(serviceName)/WebService/WebService.csproj | Select-String '(?<=<AssemblyName>).*(?=</AssemblyName>)').Matches[0].Value
              $dockerfileContents = "FROM mcr.microsoft.com/dotnet/core/aspnet:$(dotnetCoreRuntimeVersion)-alpine AS base`nWORKDIR /app`nEXPOSE 80`nCOPY . .`nENTRYPOINT [`"dotnet`", `"$assemblyName.dll`"]"
              Set-Content -Value $dockerfileContents -Path $(dockerfile) -NoNewline -Encoding utf8
            displayName: Generate Dockerfile
            workingDirectory: $(Pipeline.Workspace)/$(publishedFilesArtifactName)
          - task: Docker@2
            displayName: Build and push container
            inputs:
              containerRegistry: $(dockerHubServiceConnectionName)
              repository: $(dockerHubRepositoryName)/$(serviceName)
              command: buildAndPush
              dockerfile: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/$(dockerfile)
              buildContext: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/src/services/$(serviceName)/WebService/bin/$(dotnetBuildConfiguration)/netcoreapp$(dotnetCoreRuntimeVersion)/$(dotnetProductionRuntimeId)/publish
              tags: |-
                $(Build.BuildId)
                $(Build.SourceVersion)

  - stage: cleanup
    displayName: Cleanup
    dependsOn:
      - enumerateDependencies
      - deployServices
    condition: and(always(), eq(variables['runCleanupStage'], 'true'))
    jobs:
      - job: getPipelineVariables
        displayName: Get pipeline variables
        dependsOn: []
        steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: Get pipeline variables
            name: getPipelineVariables
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |-
                kubernetesNamespaceWasCreated=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(kubernetesNamespaceWasCreatedRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=kubernetesNamespaceWasCreated;isOutput=true]$kubernetesNamespaceWasCreated"
                mmmIotPlatformServicesHelmChartWasInstalled=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(mmmIotPlatformServicesHelmChartWasInstalledRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=mmmIotPlatformServicesHelmChartWasInstalled;isOutput=true]$mmmIotPlatformServicesHelmChartWasInstalled"
                mmmIotPlatformIngressHelmChartWasInstalled=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(mmmIotPlatformIngressHelmChartWasInstalledRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
                echo "##vso[task.setvariable variable=mmmIotPlatformIngressHelmChartWasInstalled;isOutput=true]$mmmIotPlatformIngressHelmChartWasInstalled"

      - job: deleteNamespace
        displayName: Delete namespace
        dependsOn:
          - getPipelineVariables
        condition: and(eq(dependencies.getPipelineVariables.outputs['getPipelineVariables.kubernetesNamespaceWasCreated'], 'true'), always())
        steps:
          - checkout: none

          - task: Kubernetes@1
            displayName: Delete namespace
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: $(subscriptionName)
              azureResourceGroup: $(resourceGroupName)
              kubernetesCluster: $(aksName)
              command: delete
              arguments: namespace $(kubernetesNamespace) --now=true --ignore-not-found=true
                