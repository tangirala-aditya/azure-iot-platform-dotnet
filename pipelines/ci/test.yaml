trigger: none
pool:
  vmImage: ubuntu-latest
variables:
  - template: ../templates/variables-all.yaml
  - name: buildId
    value: build-$(Build.BuildId)
  - name: applicationCode
    value: acshyd
  - name: applicationShortCode
    value: acs
  - name: environmentCategory
    value: dev
  - name: subscriptionName
    value: Devops.azure3-Subscription
  - name: aksName
    value: $(applicationCode)-$(aksPartialName)-$(environmentCategory)
  - name: appConfigurationName
    value: $(applicationCode)-$(appConfigurationPartialName)-$(environmentCategory)
  - name: resourceGroupName
    value: $(resourceGroupPartialName)-iot-$(applicationShortCode)-$(environmentCategory)
  - name: storageAccountName
    value: $(applicationCode)$(storageAccountPartialName)$(environmentCategory)
  - name: tableStorageName
    value: pipeline
  - name: tableStoragePartition
    value: test
  - name: tableStorageRowKeyPrefix
    value: "$(buildId):"
  - name: kubernetesNamespaceWasCreatedRowKey
    value: kubernetesNamespaceWasCreated
  - name: mmmIotPlatformServicesHelmChartWasInstalledRowKey
    value: mmmIotPlatformServicesHelmChartWasInstalled
  - name: mmmIotPlatformIngressHelmChartWasInstalledRowKey
    value: mmmIotPlatformIngressHelmChartWasInstalled
  - name: tableStorageAppConfigurationConnectionStringRowKey
    value: appConfigurationConnectionString
  - name: kubernetesNamespace
    value: $(buildId)
  - name: dockerfile
    value: Dockerfile
  - name: helmVersion
    value: $(helmVersion2)
  - name: mmmIotPlatformServicesHelmChartName
    value: mmm-iot-platform-services
  - name: mmmIotPlatformIngressHelmChartName
    value: mmm-iot-platform-ingress
  - name: publishedFilesArtifactName
    value: publishFiles
  - name: functionsArtifactName
    value: functionsFiles
  - name: webuiArtifactName
    value: webuiFiles
  - name: helmInstallTimeoutInSeconds
    value: 1000
  - name: grafanaImage
    value: docker.io/azureiot3m/grafana-custom:latest    
  - name: mmmIotPlatformServicesHelmChartValuesFile
    value: pipelines/ci/mmm-iot-platform-chart-values.yaml
  - name: mmmIotPlatformServicesHelmChartReleaseName
    value: services-$(buildId)
  - name: mmmIotPlatformIngressHelmChartReleaseName
    value: ingress-$(buildId)
  - name: commitsSinceLastReleaseArtifactName
    value: commitsSinceLastRelease 
  
stages:
  - stage: build
    displayName: Build
    dependsOn: []
    jobs:
      - job: preBuild
        displayName: Pre-build
        steps:
          - checkout: none
          - task: AzureCLI@2
            displayName: Get App Configuration connection string
            name: getAppConfigurationConnectionString
            inputs:
              azureSubscription: $(subscriptionName)
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |-
                $appConfigurationConnectionString = "Endpoint=https://acshyd-appconfig-dev.azconfig.io;Id=GYCS-l4-s0:MFR+WNIgDpva5VAfDYPP;Secret=hc1mnHRNECprwxNlBi2WwftqQizq19Gi9dyReLf+P6E="
                echo "##vso[task.setvariable variable=AppConfigurationConnectionString;isOutput=true]$appConfigurationConnectionString"

      - job: codeQl
        displayName: Code Scanning using CodeQL
        pool:
          vmImage: ubuntu-latest
        dependsOn:
          - preBuild
        variables:
          AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
        steps:
          - checkout: self
            displayName: Checkout repository

          - task: PowerShell@2
            displayName: CodeQL Scan
            inputs:
              targetType: inline
              script: |-
                  Write-Host "downloading Code QL analysis for windows"
                  $ProgressPreference = 'SilentlyContinue'
                  wget https://github.com/github/codeql-action/releases/latest/download/codeql-runner-linux
                  chmod +x codeql-runner-linux
                  Write-Host "Code QL analysis for linux downloaded, now we init it...."                  
                  ./codeql-runner-linux init --github-url https://github.com --repository tangirala-aditya/azure-iot-platform-dotnet  --github-auth $(GITHUB_PAT_TOKEN) --languages csharp 

          - script: >-
             chmod +x ./codeql-runner/codeql-env.sh
                . ./codeql-runner/codeql-env.sh
            displayName: Export Environment Variables

          - task: CopyFiles@2
            inputs:
              contents: '**'
              targetFolder: $(Build.SourcesDirectory)/codeql-runner/codeql_databases/csharp

          - script: >-
                dotnet restore 
            displayName: Restore Dependencies

          - script: >-
                dotnet build /p:UseSharedCompilation=false /p:OutDir=$(Build.SourcesDirectory)
            displayName: Build Assemblies

          - script: >-
                ./codeql-runner-linux analyze --github-url https://github.com --repository tangirala-aditya/azure-iot-platform-dotnet --github-auth $(GITHUB_PAT_TOKEN) --commit $(Build.SourceVersion) --ref $(Build.SourceBranch)
            displayName: Build Assemblies

          - script: >-
                jq '.runs[].tool.driver.rules[] |= . + {"defaultConfiguration": {"level": "error"}}' $(Build.SourcesDirectory)/codeql-runner/codeql-sarif/csharp.sarif >  $(Build.SourcesDirectory)/codeql-runner/codeql-sarif/final.sarif  
            displayName: Configure SARIF File

          - script: >-
                ./codeql-runner-linux upload  --sarif-file $(Build.SourcesDirectory)/codeql-runner/codeql-sarif/final.sarif  --github-url https://github.com --repository tangirala-aditya/azure-iot-platform-dotnet --github-auth $(GITHUB_PAT_TOKEN) --commit $(Build.SourceVersion) --ref $(Build.SourceBranch) 
            displayName: Analyse CodeQL and Upload them to GHR

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.SourcesDirectory)/codeql-runner/codeql-sarif'
              ArtifactName: 'CodeAnalysis'
              publishLocation: 'Container'

  #     - job: build
  #       displayName: Build Services
  #       dependsOn:
  #         - preBuild
  #         - codeQl
  #       variables:
  #         AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
  #       steps:
  #         - checkout: self
  #           displayName: Checkout repository

  #         - task: UseDotNet@2
  #           inputs:
  #             packageType: 'sdk'
  #             version: '3.1.x'
  #             includePreviewVersions: true

  #         - script: >-
  #             dotnet restore
  #             --force
  #             --no-cache
  #             --no-dependencies
  #             --packages .nuget
  #             --runtime $(dotnetProductionRuntimeId)
  #             /p:TargetLatestRuntimePatch=true
  #           displayName: Restore dependencies
  #         - script: >-
  #             dotnet publish
  #             --self-contained false
  #             --no-restore
  #             --no-dependencies
  #             --configuration $(dotnetBuildConfiguration)
  #             --runtime $(dotnetProductionRuntimeId)
  #             /p:TargetLatestRuntimePatch=true
  #           displayName: Build assemblies
  #         - task: CopyFiles@2
  #           displayName: Prepare services artifacts
  #           inputs:
  #             contents: |
  #               *.sln
  #               *.props
  #               *.ruleset
  #               global.json
  #               .nuget/**/*
  #               src/services/**/*
  #               test/services/**/*
  #               src/functions/**/*
  #             targetFolder: $(publishedFilesArtifactName)
  #             cleanTargetFolder: true

  #         - publish: $(publishedFilesArtifactName)
  #           artifact: $(publishedFilesArtifactName)
  #           displayName: Publish services artifacts

  #     - job: functionBuild
  #       displayName: Build Functions
  #       pool:
  #         vmImage: 'vs2017-win2016'
  #       dependsOn:
  #         - preBuild
  #       variables:
  #         AppConfigurationConnectionString: $[dependencies.preBuild.outputs['getAppConfigurationConnectionString.appConfigurationConnectionString']]
  #       steps:
  #         - checkout: self
  #           displayName: Checkout repository

  #         - task: UseDotNet@2
  #           inputs:
  #             packageType: 'sdk'
  #             version: '3.1.x'
  #             includePreviewVersions: true

  #         - script: >-
  #             dotnet restore
  #             --force
  #             --no-cache
  #             --no-dependencies
  #             --packages .nuget
  #             /p:TargetLatestRuntimePatch=true
  #           displayName: Restore dependencies
  #         - script: >-
  #             dotnet publish
  #             --self-contained false
  #             --no-restore
  #             --no-dependencies
  #             --configuration $(dotnetBuildConfiguration)
  #             /p:TargetLatestRuntimePatch=true
  #           displayName: Build assemblies
  #         - task: CopyFiles@2
  #           displayName: Prepare Azure Functions artifacts
  #           inputs:
  #             contents: |
  #               src/functions/**/*
  #             targetFolder: $(functionsArtifactName)
  #             cleanTargetFolder: true

  #         - publish: $(functionsArtifactName)
  #           artifact: $(functionsArtifactName)
  #           displayName: Publish Azure Functions artifacts

  # - stage: listCommitsSinceLastRelease
  #   displayName: List commits since last release
  #   condition: false
  #   dependsOn: []
  #   jobs:
  #     - job: listCommitsSinceLastRelease
  #       displayName: List commits since last release
  #       steps:
  #         - checkout: self
  #           displayName: Checkout repository

  #         - template: ../templates/print-build-variables.yaml

  #         - template: ../templates/print-agent-variables.yaml

  #         - template: ../templates/print-system-variables.yaml

  #         - template: ../templates/print-common-variables.yaml

  #         - pwsh: |-
  #             if (!(Test-Path $(commitsSinceLastReleaseArtifactName))) {
  #               New-Item $(commitsSinceLastReleaseArtifactName) -Type Directory
  #             }
  #             $previousReleaseTag = git for-each-ref --sort=-creatordate --format '%(tag)' refs/tags | ? {$_.trim() -ne "" } |
  #               Select-Object -First 1
  #             $logFilePath = (Join-Path $(commitsSinceLastReleaseArtifactName) git-log.txt)
  #             "Commits since ${previousReleaseTag}:" | Set-Content $logFilePath
  #             Write-Output "previousReleaseTag: $previousReleaseTag"
  #             Write-Output 'Build.SourceVersion: $(Build.SourceVersion)'
  #             git log --oneline --no-decorate --topo-order ^$previousReleaseTag $(Build.SourceVersion) |
  #               Tee-Object $logFilePath -Append
  #           displayName: List commits since last release
  #         - publish: $(commitsSinceLastReleaseArtifactName)
  #           artifact: $(commitsSinceLastReleaseArtifactName)
  #           displayName: Publish list of commits since last release

  # - stage: buildFrontEndContainers
  #   displayName: Build front-end containers
  #   condition: false
  #   dependsOn: []
  #   jobs:
  #     - job: lintWebuiCode
  #       displayName: Lint webui code
  #       steps:
  #         - checkout: self
  #           displayName: Checkout repository

  #         - task: NodeTool@0
  #           inputs:
  #             versionSpec: 14.16.0

  #         - pwsh: |-
  #             npm install
  #             npm run lint
  #           displayName: npm run lint
  #           workingDirectory: src/webui
  #         - task: CopyFiles@2
  #           displayName: Prepare services artifacts
  #           inputs:
  #             contents: |
  #               src/webui/**/*
  #             targetFolder: $(webuiArtifactName)
  #             cleanTargetFolder: true

  #         - publish: $(webuiArtifactName)
  #           artifact: $(webuiArtifactName)
  #           displayName: Publish services artifacts

  #     - job: buildFrontEndContainers
  #       displayName: Build front-end containers
  #       dependsOn: []
  #       strategy:
  #         matrix:
  #           reverse-proxy:
  #             serviceName: reverse-proxy
  #           webui:
  #             serviceName: webui
  #       steps:
  #         - checkout: self
  #           displayName: Checkout repository

  #         - task: Docker@2
  #           displayName: Build and push container
  #           inputs:
  #             containerRegistry: $(dockerHubServiceConnectionName)
  #             repository: $(dockerHubRepositoryName)/$(serviceName)
  #             command: buildAndPush
  #             dockerfile: src/$(serviceName)/$(dockerfile)
  #             buildContext: src/$(serviceName)
  #             tags: |-
  #               $(Build.BuildId)
  #               $(Build.SourceVersion)

  # - stage: buildServiceContainers
  #   displayName: Build service containers
  #   condition: false
  #   dependsOn:
  #     - build
  #   jobs:
  #     - job: buildServiceContainers
  #       displayName: Build service containers
  #       strategy:
  #         matrix:
  #           asa-manager:
  #             serviceName: asa-manager
  #           config:
  #             serviceName: config
  #           device-telemetry:
  #             serviceName: device-telemetry
  #           diagnostics:
  #             serviceName: diagnostics
  #           identity-gateway:
  #             serviceName: identity-gateway
  #           iothub-manager:
  #             serviceName: iothub-manager
  #           storage-adapter:
  #             serviceName: storage-adapter
  #           tenant-manager:
  #             serviceName: tenant-manager
  #       steps:
  #         - checkout: none

  #         - download: current
  #           artifact: $(publishedFilesArtifactName)
  #           displayName: Download artifacts

  #         - pwsh: |-
  #             $assemblyName = (Get-Content src/services/$(serviceName)/WebService/WebService.csproj | Select-String '(?<=<AssemblyName>).*(?=</AssemblyName>)').Matches[0].Value
  #             $dockerfileContents = "FROM mcr.microsoft.com/dotnet/core/aspnet:$(dotnetCoreRuntimeVersion)-alpine AS base`nWORKDIR /app`nEXPOSE 80`nCOPY . .`nENTRYPOINT [`"dotnet`", `"$assemblyName.dll`"]"
  #             Set-Content -Value $dockerfileContents -Path $(dockerfile) -NoNewline -Encoding utf8
  #           displayName: Generate Dockerfile
  #           workingDirectory: $(Pipeline.Workspace)/$(publishedFilesArtifactName)
  #         - task: Docker@2
  #           displayName: Build and push container
  #           inputs:
  #             containerRegistry: $(dockerHubServiceConnectionName)
  #             repository: $(dockerHubRepositoryName)/$(serviceName)
  #             command: buildAndPush
  #             dockerfile: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/$(dockerfile)
  #             buildContext: $(Pipeline.Workspace)/$(publishedFilesArtifactName)/src/services/$(serviceName)/WebService/bin/$(dotnetBuildConfiguration)/netcoreapp$(dotnetCoreRuntimeVersion)/$(dotnetProductionRuntimeId)/publish
  #             tags: |-
  #               $(Build.BuildId)
  #               $(Build.SourceVersion)

  # - stage: cleanup
  #   displayName: Cleanup
  #   condition: false
  #   #condition: and(always(), eq(variables['runCleanupStage'], 'true'))
  #   jobs:
  #     - job: getPipelineVariables
  #       displayName: Get pipeline variables
  #       dependsOn: []
  #       steps:
  #         - checkout: none

  #         - task: AzureCLI@2
  #           displayName: Get pipeline variables
  #           name: getPipelineVariables
  #           inputs:
  #             azureSubscription: $(subscriptionName)
  #             scriptType: bash
  #             scriptLocation: inlineScript
  #             inlineScript: |-
  #               kubernetesNamespaceWasCreated=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(kubernetesNamespaceWasCreatedRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
  #               echo "##vso[task.setvariable variable=kubernetesNamespaceWasCreated;isOutput=true]$kubernetesNamespaceWasCreated"
  #               mmmIotPlatformServicesHelmChartWasInstalled=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(mmmIotPlatformServicesHelmChartWasInstalledRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
  #               echo "##vso[task.setvariable variable=mmmIotPlatformServicesHelmChartWasInstalled;isOutput=true]$mmmIotPlatformServicesHelmChartWasInstalled"
  #               mmmIotPlatformIngressHelmChartWasInstalled=`az storage entity query --filter "PartitionKey eq '$(tableStoragePartition)' and RowKey eq '$(tableStorageRowKeyPrefix)$(mmmIotPlatformIngressHelmChartWasInstalledRowKey)'" --select Content --query items[].Content --output tsv --table-name $(tableStorageName) --account-name $(storageAccountName)`
  #               echo "##vso[task.setvariable variable=mmmIotPlatformIngressHelmChartWasInstalled;isOutput=true]$mmmIotPlatformIngressHelmChartWasInstalled"

  #     - job: deleteNamespace
  #       displayName: Delete namespace
  #       dependsOn:
  #         - getPipelineVariables
  #       condition: and(eq(dependencies.getPipelineVariables.outputs['getPipelineVariables.kubernetesNamespaceWasCreated'], 'true'), always())
  #       steps:
  #         - checkout: none

  #         - task: Kubernetes@1
  #           displayName: Delete namespace
  #           inputs:
  #             connectionType: Azure Resource Manager
  #             azureSubscriptionEndpoint: $(subscriptionName)
  #             azureResourceGroup: $(resourceGroupName)
  #             kubernetesCluster: $(aksName)
  #             command: delete
  #             arguments: namespace $(kubernetesNamespace) --now=true --ignore-not-found=true
                